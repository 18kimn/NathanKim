library(blogdown)
library(tidyverse)
build_site()
serve_site()
?new_post()
new_post(subdir = "blog/keywords")
new_post(title = "Introduction", subdir = "blog/keywords")
blogdown:::new_post_addin()
serve_site
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
new_post(subdir = "blog/keywords")
new_post(title = "Home", subdir = "blog/keywords")
titles <- c("Adjacency", "Class", "Race", "Neoliberalism", "Autonomy", "Revolutionary")
map(titles, function(title) new_post(title, subdir = "blog/keywords"))
blogdown:::serve_site()
blogdown:::serve_site()
remove_desktopini
library(blogdown)
blogdown:::serve_site()
blogdown:::serve_site()
serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
tinytex::tlmgr_update()
tinytex::reinstall_tinytex()
tinytex:::is_tinytex()
tinytex::tlmgr_install("ClearSans")
library(devtools)
install.packages("nstrayer/cv")
install.packages("nstrayer/datadrivencv")
install_github("nstrayer/datadrivencv")
install_github("nstrayer/datadrivencv")
devtools::install_github("nstrayer/datadrivencv")
devtools::install_github("nstrayer/datadrivencv")
devtools::install_github("nstrayer/datadrivencv")
install.packages("glue")
install.packages("xfun")
install.packages("rlang")
install.packages("tinytex")
install.packages("icon")
devtools::install_github("nstrayer/datadrivencv")
library(datadrivencn)
library(datadrivencv)
?use_datadriven_cv
?use_csv_data_storage
use_csv_data_storage("content/cv")
?use_datadriven_cv
use_datadriven_cv(full_name = "Nathan Kim", data_location = "https://docs.google.com/spreadsheets/d/1Q6UT_U3Ox4Y0BZUx0wUuLIs2KTUl_6qHigLjXcvRPgQ/edit?usp=sharing", pdf_location = "https://github.com/18kimn/nathankim/raw/master/content/cv/cv.pdf", html_location = "nathankim.name/cv/", source_location = "https://github.com/18kimn/nathankim")
use_datadriven_cv(full_name = "Nathan Kim", data_location = "https://docs.google.com/spreadsheets/d/1Q6UT_U3Ox4Y0BZUx0wUuLIs2KTUl_6qHigLjXcvRPgQ/edit?usp=sharing", pdf_location = "https://github.com/18kimn/nathankim/raw/master/content/cv/cv.pdf", html_location = "nathankim.name/cv/", source_location = "https://github.com/18kimn/nathankim")
list.files()
use_datadriven_cv(full_name = "Nathan Kim", data_location = "https://docs.google.com/spreadsheets/d/1Q6UT_U3Ox4Y0BZUx0wUuLIs2KTUl_6qHigLjXcvRPgQ/edit?usp=sharing", pdf_location = "https://github.com/18kimn/nathankim/raw/master/content/cv/cv.pdf", html_location = "nathankim.name/cv/", source_location = "https://github.com/18kimn/nathankim", use_network_logo = TRUE)
source('~/projs/nathankim/content/cv/cv_printing_functions.r')
source('~/projs/nathankim/content/cv/render_cv.r')
source('~/projs/nathankim/content/cv/render_cv.r')
list.files()
list.files("content/cv")
# Knit the HTML version
rmarkdown::render("content/cv/cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "content/cv/cv.html")
?rmarkdown::render
file.exists("content/cv/cv.rmd")
# Knit the HTML version
rmarkdown::render("v.rmd",
params = list(pdf_mode = FALSE),
output_file = "content/cv/cv.html")
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "content/cv/cv.html")
# Knit the HTML version
rmarkdown::render(here::here("content/cv/cv.rmd"),
params = list(pdf_mode = FALSE),
output_file = "content/cv/cv.html")
# Knit the HTML version
rmarkdown::render(here::here("content/cv/cv.rmd"),
params = list(pdf_mode = FALSE),
output_file = here::here("content/cv/cv.html"))
# Knit the HTML version
rmarkdown::render(here::here("content/cv/cv.rmd"),
params = list(pdf_mode = FALSE),
output_file = here::here("content/cv/cv.html"))
library(magrittr) # For the pipe
source(here::here("content/cv/cv_printing_functions.r"))
# Read in all data and initialize a CV printer object
CV <- create_CV_object(
data_location = "https://docs.google.com/spreadsheets/d/1Q6UT_U3Ox4Y0BZUx0wUuLIs2KTUl_6qHigLjXcvRPgQ/edit?usp=sharing",
pdf_mode = params$pdf_mode
)
# Read in all data and initialize a CV printer object
CV <- create_CV_object(
data_location = "https://docs.google.com/spreadsheets/d/1Q6UT_U3Ox4Y0BZUx0wUuLIs2KTUl_6qHigLjXcvRPgQ/edit?usp=sharing",
pdf_mode = params$pdf_mode
)
# Read in all data and initialize a CV printer object
CV <- create_CV_object(
data_location = "https://docs.google.com/spreadsheets/d/1Q6UT_U3Ox4Y0BZUx0wUuLIs2KTUl_6qHigLjXcvRPgQ/edit?usp=sharing",
pdf_mode = params$pdf_mode
)
data_location <- "https://docs.google.com/spreadsheets/d/1Q6UT_U3Ox4Y0BZUx0wUuLIs2KTUl_6qHigLjXcvRPgQ/edit?usp=sharing"
pdf_mode <- F
sheet_is_publicly_readable = TRUE
cv <- list(
pdf_mode = pdf_mode,
links = c()
)
is_google_sheets_location <- stringr::str_detect(data_location, "docs\\.google\\.com")
is_google_sheets_location
# This tells google sheets to not try and authenticate. Note that this will only
# work if your sheet has sharing set to "anyone with link can view"
googlesheets4::sheets_deauth()
# My info is in a public sheet so there's no need to do authentication but if you want
# to use a private sheet, then this is the way you need to do it.
# designate project-specific cache so we can render Rmd without problems
options(gargle_oauth_cache = ".secrets")
# This tells google sheets to not try and authenticate. Note that this will only
# work if your sheet has sharing set to "anyone with link can view"
googlesheets4::sheets_deauth()
read_gsheet <- function(sheet_id){
googlesheets4::read_sheet(data_location, sheet = sheet_id, skip = 1, col_types = "c")
}
cv$entries_data  <- read_gsheet(sheet_id = "entries")
cv$skills        <- read_gsheet(sheet_id = "language_skills")
cv$text_blocks   <- read_gsheet(sheet_id = "text_blocks")
cv$contact_info  <- read_gsheet(sheet_id = "contact_info")
cv
extract_year <- function(dates){
date_year <- stringr::str_extract(dates, "(20|19)[0-9]{2}")
date_year[is.na(date_year)] <- lubridate::year(lubridate::ymd(Sys.Date())) + 10
date_year
}
parse_dates <- function(dates){
date_month <- stringr::str_extract(dates, "(\\w+|\\d+)(?=(\\s|\\/|-)(20|19)[0-9]{2})")
date_month[is.na(date_month)] <- "1"
paste("1", date_month, extract_year(dates), sep = "-") %>%
lubridate::dmy()
}
# Clean up entries dataframe to format we need it for printing
cv$entries_data %<>%
tidyr::unite(
tidyr::starts_with('description'),
col = "description_bullets",
sep = "\n- ",
na.rm = TRUE
) %>%
dplyr::mutate(
description_bullets = ifelse(description_bullets != "", paste0("- ", description_bullets), ""),
start = ifelse(start == "NULL", NA, start),
end = ifelse(end == "NULL", NA, end),
start_year = extract_year(start),
end_year = extract_year(end),
no_start = is.na(start),
has_start = !no_start,
no_end = is.na(end),
has_end = !no_end,
timeline = dplyr::case_when(
no_start  & no_end  ~ "N/A",
no_start  & has_end ~ as.character(end),
has_start & no_end  ~ paste("Current", "-", start),
TRUE                ~ paste(end, "-", start)
)
) %>%
dplyr::arrange(desc(parse_dates(end))) %>%
dplyr::mutate_all(~ ifelse(is.na(.), 'N/A', .))
cv$entries_data %<>%
tidyr::unite(
tidyr::starts_with('description'),
col = "description_bullets",
sep = "\n- ",
na.rm = TRUE
)
cv$entries_data
# Read in all data and initialize a CV printer object
CV <- create_CV_object(
data_location = "https://docs.google.com/spreadsheets/d/1Q6UT_U3Ox4Y0BZUx0wUuLIs2KTUl_6qHigLjXcvRPgQ/edit?usp=sharing",
pdf_mode = params$pdf_mode
)
CV
# Knit the HTML version
rmarkdown::render(here::here("content/cv/cv.rmd"),
params = list(pdf_mode = FALSE),
output_file = here::here("content/cv/cv.html"))
CV
CV %>% str
build_network_logo()
build_network_logo(CV$entries_data)
build_network_logo(CV$entries_data) %>% class
CV %>% print_contact_info()
CV
# Note the special double pipe so we modify the CV object in place
CV %<>% print_text_block("intro")
CV
CV %<>% print_section('education')
?icon
library(icon)
?icon::ai()
ii_iconList
# Knit the HTML version
rmarkdown::render(here::here("content/cv/cv.rmd"),
params = list(pdf_mode = FALSE),
output_file = here::here("content/cv/cv.html"))
CV$entries_data
CV$entries_data$section %>% unique
# Build interactive network of positions colored by section
# and connected if they occurred in the same year
datadrivencv::build_network_logo(CV$entries_data)
# Knit the HTML version
rmarkdown::render(here::here("content/cv/cv.rmd"),
params = list(pdf_mode = FALSE),
output_file = here::here("content/cv/cv.html"))
Sys.Date()
format(Sys.Date(), "%M %d, %Y")
format(Sys.Date(), "%B %d, %Y")
date <- Sys.Date()
library(lubridate)
library(glue)
glue("{format(date, '%B')} {day(dt)}th, {year(dt)}")
date
glue("{format(date, '%B')} {day(date)}th, {year(date)}")
source('~/projs/nathankim/content/cv/render_cv.r')
?print_text_block
#' @description Prints out text block identified by a given label.
#' @param label ID of the text block to print as encoded in `label` column of `text_blocks` table.
print_text_block <- function(cv, label){
text_block <- dplyr::filter(cv$text_blocks, loc == label) %>%
dplyr::pull(text)
strip_res <- sanitize_links(cv, text_block)
cat(strip_res$text)
invisible(strip_res$cv)
}
print_text_block
CV$text_blocks
source('~/projs/nathankim/content/cv/render_cv.r')
# Note the special double pipe so we modify the CV object in place
CV %<>% print_text_block("intro1")
"\n"
CV %<>% print_text_block("intro2")
print_text_block()
print_text_block
# Note the special double pipe so we modify the CV object in place
CV %<>% print_text_block("intro1")
cat("\n")
CV %<>% print_text_block("intro2")
source('~/projs/nathankim/content/cv/render_cv.r')
# Read in all data and initialize a CV printer object
CV <- create_CV_object(
data_location = "https://docs.google.com/spreadsheets/d/1Q6UT_U3Ox4Y0BZUx0wUuLIs2KTUl_6qHigLjXcvRPgQ/edit?usp=sharing",
pdf_mode = params$pdf_mode
)
CV$text_blocks
source('~/projs/nathankim/content/cv/render_cv.r')
source('~/projs/nathankim/content/cv/render_cv.r')
source('~/projs/nathankim/content/cv/render_cv.r')
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
library(icon)
?fa_500px
source('~/projs/nathankim/content/cv/render_cv.r')
source('~/projs/nathankim/content/cv/render_cv.r')
list.files()
list.files("static")
list.files("static/cv")
list.files("static/files")
list.files("static/files/cv.pdf")
source('~/projs/nathankim/content/cv/render_cv.r')
source('~/projs/nathankim/content/cv/render_cv.r')
source('~/projs/nathankim/content/cv/render_cv.r')
source('~/projs/nathankim/content/cv/render_cv.r')
source('~/projs/nathankim/content/cv/render_cv.r')
source('~/projs/nathankim/content/cv/render_cv.r')
source('~/projs/nathankim/content/cv/render_cv.r')
source('~/projs/nathankim/content/cv/render_cv.r')
source('~/projs/nathankim/content/cv/render_cv.r')
source('~/projs/nathankim/content/cv/render_cv.r')
source('~/projs/nathankim/content/cv/render_cv.r')
source('~/projs/nathankim/content/cv/render_cv.r')
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
list.files(full.names = T, recursive = T, pattern ="css")
file.edit(" themes/academic/data/academic.toml")
file.edit("themes/academic/data/academic.toml")
serve_site()
library(blogdown)
serve_site()
list.files(full.names = T, recursive = T, pattern ="hugo-academic")
list.files(full.names = T, recursive = T, pattern ="academic")
list.files("data/fonts")
file.edit("data/fonts/source_serif_pro.toml")
list.files("data/fonts")
list.files("data/fonts")
servie_site()
list.files("params.toml")
list.files(pattern = "params.toml", recursive = T, full.names=T)
list.files()
list.files("static")
list.files("static/img")
list.files("static/img/misc")
list.files(pattern = "academic.css", full.names=T, recursive = T)
source('~/projs/nathankim/content/cv/render_cv.r')
serve_site()
serve_site()
serve_site()
library(blogdown)
serve_site()
servr::daemon_stop(1)
serve_site()
stop_server()
serve_site()
